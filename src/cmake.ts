/*  eslint no-template-curly-in-string: "off"*/
import * as _ from 'lodash';
import * as Bluebird from 'bluebird';
import * as path from 'path';
import { existsSync } from 'fs';
import { arrayify, check } from 'js-object-tools';

import { log } from './log';
import { startsWith } from './string';
import { fetch } from './tools';
import { execAsync } from './sh';
import { args } from './args';
import { Environment } from './environment';
import { ShellPlugin } from './sh';
import { PluginOptions } from './plugin';

function quotedList(array: string[]) {
  return _.map(array, (el) => {
    return `"${el}"`;
  }).join(' ');
}

interface CMakeOptions extends PluginOptions {
  cmake: {
    minimumVersion: string;
    version: string;
  },
  toolchain?: {
    ninja: {
      version: string;
    }
  }
}

export class CMake extends ShellPlugin<CMakeOptions> {

  constructor(environment: Environment) {
    super(environment);
    this.name = 'cmake';
    this.projectFileName = 'CMakeLists.txt';
    this.buildFileName = 'build.ninja';
  }

  mapOptionsToCommand(toolpaths: any) {
    const defines = this.options.configure.flags || {};
    const cMakeDefines = _.extend({
      LIBRARY_OUTPUT_PATH: this.environment.d.install.libraries[0].from
    }, defines);
    let command = `cmake -G Ninja -DCMAKE_MAKE_PROGRAM=${toolpaths.ninja} ${this.environment.d.project}`;
    for (const k of Object.keys(cMakeDefines)) {
      let value = cMakeDefines[k];
      if (check(value, String)) {
        if (startsWith(value, '~/')) {
          value = `${this.environment.d.home}/${value.slice(2)}`;
        }
      }
      command += ` -D${k}=${value}`;
    }
    return command;
  }

  fetch() {
    return fetch(this.options.toolchain).then((toolpaths) => this.toolpaths = toolpaths);
  }
  generate() {
    const options = this.options;

    return Promise.resolve(
      this.header() +
      this.includeDirectories() +
      this.matching() +
      this.flags() +
      this.target() +
      this.link());
  }
  header(): string {
    let pv = this.options.cmake ? this.options.cmake.version : '0.0.1';
    if (startsWith(pv, 'v')) {
      pv = pv.slice(1);
    }
    const version = this.options.cmake ? this.options.cmake.minimumVersion : '3.2';
    return `
# generated by trieMake
cmake_minimum_required(VERSION ${version})
project(${this.environment.project.name} VERSION ${pv})`;
  }

  includeDirectories(): string {
    switch (this.environment.outputType) {
      case 'static':
      case 'dynamic':
      case 'executable':
      default:
        return `
include_directories(${quotedList(this.environment.includeDirs())})`;
      case 'environment':
        return `
# Essential include files to build a environment addon,
# you should add this line in every CMake.js based project.
include_directories(\${CMAKE_JS_INC})
include_directories(${quotedList(this.environment.includeDirs())})`;
    }
  }

  matching(): string {
    const relativeToSource = path.relative(this.environment.d.project, this.environment.d.source) || '.';
    const src = _.map(this.environment.s, (fp) => {
      console.log(path.join(relativeToSource, fp));
      return path.join(relativeToSource, fp);
    })
    return `\n
set(SOURCE_FILES \${SOURCE_FILES} ${quotedList(src)})`;
  }

  flags(): string {
    const cxxFlags = this.environment.cxxFlags().join(' ');
    return `
set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} ${cxxFlags}")
set(CMAKE_C_FLAGS "\${CMAKE_C_FLAGS} ${this.environment.cFlags().join(' ')}")`;
  }
  target(): string {
    switch (this.environment.outputType) {
      case 'static':
      default:
        return `\nadd_library(${this.environment.project.name} STATIC \${SOURCE_FILES})`;
      case 'executable':
        return `\nadd_executable(${this.environment.project.name} \${SOURCE_FILES})`;
    }
  }
  link(): string {
    let linkLibs = quotedList(this.environment.build.libs.reverse());
    const frameworks = quotedList(this.environment.frameworks());
    if (linkLibs.length || frameworks.length) {
      return `
target_link_libraries(\${PROJECT_NAME} ${linkLibs} ${frameworks} ${this.environment.linkerFlags().join(' ')})
`;
    }
    return '';
  }
}