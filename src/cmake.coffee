_ = require 'underscore'
Promise = require 'bluebird'
fs = require './fs'
numCPUs = require('os').cpus().length
path = require('path')
sh = require('shelljs')

module.exports = (task, dep, argv) ->
  flags = _.extend {}, task.cmake

  run = (command) ->
    if argv.verbose then console.log("run cmake command: ", command)
    new Promise (resolve, reject) ->
      sh.cd dep.d.build
      sh.exec command, (code, stdout, stderr) ->
        if code then reject "cmake exited with code " + code + "\n" + command
        else if stdout then resolve stdout
        else if stderr then resolve stderr

  ensureBuildFolder = -> unless fs.existsSync dep.d.build then fs.mkdirSync dep.d.build

  configure = ->
    ensureBuildFolder()
    config = _.extend
      LIBRARY_OUTPUT_PATH: dep.d.libs
    , task.cmake?.configure
    command = "cmake #{dep.d.project}"
    _.each config, (value, key) ->
      if typeof value == 'string' or value instanceof String
        if value.startsWith '~/'
          value = "#{dep.d.home}/#{value.slice(2)}"
      command += " -D#{key}=#{value}"
    run command

  build = ->
    ensureBuildFolder()
    run "make"

  ###
  # CONFIG GEN
  ###

  cmakeArrayToQuotedList = (array) ->
    s = ""
    _.each array, (el, i) ->
      if i == 0 then s += "\"#{el}\""
      else s += " \"#{el}\""
    s

  header = -> """
              # generated by bbt
              cmake_minimum_required(VERSION #{@cmake?.minimumVersion || 3.1})
              project(#{@name} VERSION #{@version || '0.0.1'})
              """

  flags = -> """\n
             set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
             """

  boost = ->
    if @boost
      if typeof @boost == 'string' or @boost instanceof String
        @boost = libs: [@boost]
      """\n
      # Include BoostLib module
      SET(CMAKE_MODULE_PATH "#{path.join @npmDir, "node_modules/boost-lib/cmake"}")
      include(BoostLib)
      # Locate/Download Boost (semver)
      require_boost_libs("#{@boost.version || ">= 1.59.0"}" "#{@boost.libs.join ";"}")
      include_directories(${Boost_INCLUDE_DIRS})
      """

  includeDirectories = ->
    switch @target
      when 'static', 'dynamic', 'bin'
        """\n
        include_directories(#{cmakeArrayToQuotedList @includeDirs})
        """
      when 'node'
        """\n
        # Essential include files to build a node addon,
        # you should add this line in every CMake.js based project.
        include_directories(${CMAKE_JS_INC})
        include_directories(#{cmakeArrayToQuotedList @includeDirs})
        """

  sources = ->
    switch @target
      when 'static', 'dynamic', 'bin', 'node'
        """\n
        set(SOURCE_FILES #{cmakeArrayToQuotedList @sources})
        """

  target = ->
    switch @target
      when 'static'
        """\n
        add_library(#{@name} STATIC ${SOURCE_FILES})
        """
      when 'bin'
        """\n
        add_executable(#{@name} ${SOURCE_FILES})
        """

  link = ->
    libs = cmakeArrayToQuotedList @libs
    if @boost then libs += " ${Boost_LIBRARIES}"
    if task.target == 'node' then libs += " ${CMAKE_JS_LIB}"
    if libs.length
      """\n
      target_link_libraries(${PROJECT_NAME} #{libs})
      """

  generateLists = (funcs, context) ->
    cmake = ""
    Promise.each funcs, (fn) ->
      Promise.resolve fn.bind(context)()
      .then (val) -> if val then cmake += val
    .then -> Promise.resolve cmake

  gen: (context) ->
    _.extend context, task
    console.log 'cmake context', context
    generateLists [header, boost, includeDirectories, sources, target, link], context

  build: -> configure().then -> build()
