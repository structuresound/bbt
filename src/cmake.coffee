_ = require 'underscore'
Promise = require 'bluebird'
fs = require './fs'

module.exports = (task, context, argv) ->
  options = task.config || {}
  options.directory = task.srcDir

  BuildSystem = require('cmake-js').BuildSystem
  buildSystem = new BuildSystem options

  header = -> """
    # generated by bbt
    cmake_minimum_required(VERSION #{task.cmake?.minimumVersion || 3.1})
    project(#{task.name} VERSION #{task.version || '0.0.1'})
    """

  nodeModule = -> """
    list(APPEND CMAKE_MODULE_PATH
        ${CMAKE_CURRENT_SOURCE_DIR}/node_modules/node-cmake
    )
    find_package(NodeJS)
    add_nodejs_module(${#{task.name}} <#{context.headers} #{context.sources}>)
    """

  staticLibrary = -> """\n
    include_directories(#{context.includeDirectories})
    set(SOURCE_FILES #{context.sources})
    add_library(#{task.name} STATIC ${SOURCE_FILES})
    """

  generateLists: ->
    CMakeLists = header()
    if task.nodeAddon
      CMakeLists += nodeModule()
    else
      CMakeLists += staticLibrary()

    bindingPath = task.srcDir + '/CMakeLists.txt'
    fs.writeFileAsync bindingPath, CMakeLists

  cmake: ->
    command = _.first(argv._) || "build"

    ifCommand = (c, f) ->
      if c == command
        return f()
      false

    exitOnError = (promise) ->
      promise.catch ->
        process.exit 1

    install = -> exitOnError buildSystem.install()
    configure = -> exitOnError buildSystem.configure()

    printConfigure = ->
      exitOnError buildSystem.getConfigureCommand().then((command) ->
        console.info command
      )

    build = -> exitOnError buildSystem.build()

    printBuild = ->
      exitOnError buildSystem.getBuildCommand().then((command) ->
        console.info command
      )

    clean = -> exitOnError buildSystem.clean()

    printClean = ->
      exitOnError buildSystem.getCleanCommand().then((command) ->
        console.info command
      )

    reconfigure = -> exitOnError buildSystem.reconfigure()
    rebuild = -> exitOnError buildSystem.rebuild()
    compile = -> exitOnError buildSystem.compile()

    done = ifCommand("install", install);
    done = done or ifCommand('configure', configure)
    done = done or ifCommand('print-configure', printConfigure)
    done = done or ifCommand('build', build)
    done = done or ifCommand('print-build', printBuild)
    done = done or ifCommand('clean', clean)
    done = done or ifCommand('print-clean', printClean)
    done = done or ifCommand('reconfigure', reconfigure)
    done = done or ifCommand('rebuild', rebuild)
    done = done or ifCommand('compile', compile)

    if !done
      if command
        console.error 'COM', 'Unknown command: ' + command
        process.exit 1
      else
        build()
    done
