import { check } from 'typed-json-transform';
import * as colors from 'chalk';
import * as Bluebird from 'bluebird';

import { args } from './runtime';
import { Db } from './db';
import { log } from './log';
import { info } from './info';

export class TMakeError extends Error {
  reason: Error

  constructor(message: string, reason?: Error) {
    super(message);
    this.message = message;
    if (reason) {
      this.reason = reason;
    }
  }
  postMortem() {
    if (check(this.message, String)) {
      log.log('\ntmake error report {\n', '', this.message);
      if (this.reason) {
        if (args.verbose) {
          log.log(this.reason.stack);
        } else {
          log.log(this.reason.message);
        }
      }
      log.log('}\n');
    } else {
      log.error('terminating due to unknown error: ', this.message);
    }
  }
}

export function exit(code) {
  info.exit();
}

export const errors = {
  graph: {
    failed: function (nodes: string, error: Error) {
      return new TMakeError(`there was a problem building the dependency graph, these nodes were added successfully [ ${colors.magenta(nodes)} ], the problem is likely with one of their dependencies\n`, error);
    }
  },
  configure: {
    noProjectFile: function (plugin: TMake.Plugin.Compiler) {
      const fileError = new Error(`no build file @ ${plugin.projectFilePath()}`);
      if (!plugin.generate) {
        throw new TMakeError(`did you forget to specify [ generate ] options for ${plugin.name}?`, fileError);
      } else {
        throw new TMakeError('build file not at location generated by configure step, maybe some paths are wrong', fileError);
      }
    },
  },
  build: {
    command: {
      failed: function (command: string, error: Error) {
        return new TMakeError(`command ${command} failed on `, error);
      }
    },
    noBuildFile: function (plugin: TMake.Plugin.Compiler) {
      const fileError = new Error(`no build file @ ${plugin.buildFilePath()}`);
      if (!plugin.configure) {
        throw new TMakeError(`did you forget to specify [ configure ] options for ${plugin.name}?`, fileError);
      } else {
        throw new TMakeError('build file not at location generated by configure step, maybe some paths are wrong', fileError);
      }
    }
  },
  project: {
    notFound: function (name: string, graph?: TMake.Project[]) {
      log.log(`${colors.magenta(name)} does not appear in the module graph, check the name?`);
      if (graph) {
        info.graph.names(graph)
      }
      exit(1);
    },
    noRoot: function (project: TMake.Project) {
      throw new TMakeError('project has no root directory or parent');
    }
  },
  shell: {
    failed: function (command: string, error: Error) {
      return new TMakeError(`command ${command} \n failed with error: \n `, error);
    },
    report: function ({ command, output, cwd, short }) {
      return Db.cache.update({ type: 'report' }, { $set: { type: 'report', command, output, createdAt: new Date().toDateString() } }, { upsert: true }).then(() => {
        return Bluebird.resolve(new TMakeError(`    a subprocess failed: ${command},\n\nrun tmake report for more info`));
      });
    }
  }
}