name: "example_served"
target: "bin"
build:
  with: "ninja"
platform: "ios"
deps: [
  git: "mongodb/mongo-cxx-driver"
  path:
    project: "source"
  build:
    cmake:
      configure:
        CMAKE_DISABLE_FIND_PACKAGE_PkgConfig: true
        LIBBSON_DIR: "~/"
        LIBMONGOC_DIR: "~/"
        BSONCXX_POLY_USE_MNMLSTC: false
        BSONCXX_POLY_USE_BOOST: true
  deps: [
    git: "boostorg/asio"
    path: install: headers: from: "source/include"
  ,
    git: "boostorg/system"
    path: install: headers: from: "source/include"
  ,
    git: "mongodb/mongo-c-driver"
    configure:
      replace:
        files:
          matching: ['src/mongoc/mongoc-config.h.in', 'src/mongoc/mongoc-version.h.in']
          inputs:
            MONGOC_MAJOR_VERSION: 1
            MONGOC_MINOR_VERSION: 0
            MONGOC_MICRO_VERSION: 0
            MONGOC_PRERELEASE_VERSION: 'rc0'
            MONGOC_VERSION: '1.0.0'
            MONGOC_ENABLE_CRYPTO: 1
            MONGOC_ENABLE_CRYPTO_CNG: 0
            MONGOC_ENABLE_CRYPTO_COMMON_CRYPTO: 0
            mac:
              MONGOC_ENABLE_CRYPTO_COMMON_CRYPTO: 1
            MONGOC_ENABLE_CRYPTO_LIBCRYPTO: 1
            MONGOC_ENABLE_CRYPTO_SYSTEM_PROFILE: 1
            MONGOC_ENABLE_SSL: 1
            MONGOC_ENABLE_SSL_OPENSSL: 1
            MONGOC_ENABLE_SSL_SECURE_CHANNEL: 0
            MONGOC_ENABLE_SSL_SECURE_TRANSPORT: 0
            MONGOC_ENABLE_SASL: 0
            MONGOC_HAVE_SASL_CLIENT_DONE: 0
            MONGOC_HAVE_WEAK_SYMBOLS: 0
            MONGOC_NO_AUTOMATIC_GLOBALS: 1
          directive:
            prepost: '@'
          ext: '.h'
    build:
      with: "ninja"
      sources:
        matching: [
          'src/mongoc/**.c'
          '!src/mongoc/mongoc-rand-cng.c'
          '!src/mmongoc/mongoc-stream-tls-secure-channel-private.c'
          '!src/mongoc/mongoc-crypto-cng.c'
          '!src/mongoc/mongoc-secure-channel.c'
          '!src/mongoc/mongoc-secure-transport'
          '!src/mongoc/mongoc-crypto-common-crypto'
          '!src/mongoc/mongoc-rand-common-crypto'
        ]
      cFlags:
        DMONGOC_COMPILATION: 1
        D_GNU_SOURCE: 1
        D_BSD_SOURCE: 1
        O3: 1
        std: "c++11"
        g: 1
        Wall: 1
        Wextra: 1
        "Wno-unused-parameter": 1
        "Wno-missing-field-initializers": 1
        linux:
          pthread: 1
        win:
          "D_CRT_SECURE_NO_WARNINGS": true
        mac:
          stdlib: "libc++"
          "Wno-deprecated-declarations": true
      outputFile: "libmongoc-1.0.a"
    path:
      project: "source"
      install:
        headers: [
          from: "source/src/mongoc"
          to: "include/libmongoc-1.0"
        ,
          from: "build/src/mongoc"
          to: "include/libmongoc-1.0"
        ]
    deps: [
      git: "mongodb/libbson"
      configure:
        create:
          stdint:
            path: 'src/bson/bson-stdint.h'
            string: '#include <stdint.h>'
        replace:
          files:
            matching: ['src/bson/bson-config.h.in', 'src/bson/bson-version.h.in']
            inputs:
              BSON_MAJOR_VERSION: 1
              BSON_MINOR_VERSION: 0
              BSON_MICRO_VERSION: 0
              BSON_PRERELEASE_VERSION: 'rc0'
              BSON_VERSION: '1.0.0'
              BSON_BYTE_ORDER:
                macro: 'OS_ENDIANNESS'
                map:
                  LE: 1234
                  BE: 4321
              BSON_HAVE_STDBOOL_H: 1
              BSON_OS: 1
              BSON_HAVE_ATOMIC_32_ADD_AND_FETCH: 1
              BSON_HAVE_ATOMIC_64_ADD_AND_FETCH: 1
              BSON_PTHREAD_ONCE_INIT_NEEDS_BRACES: 0
              BSON_HAVE_CLOCK_GETTIME: 1
              BSON_HAVE_STRNLEN: 1
              BSON_HAVE_SNPRINTF: 1
              BSON_NEEDS_SET_OUTPUT_FORMAT: 0
              BSON_EXTRA_ALIGN: 1
              BSON_HAVE_DECIMAL128: 0
              win:
                BSON_OS: 2
              mac:
                BSON_HAVE_TIMESPEC: 1
            directive:
              prepost: '@'
            ext: '.h'
      build:
        with: "ninja"
        sources:
          matching: [
            'src/bson/**.c'
            'src/yajl/**.c'
          ]
        cFlags:
          DBSON_COMPILATION: 1
          O3: 1
          std: "c++11"
          g: 1
          Wall: 1
          Wextra: 1
          "Wno-unused-parameter": 1
          "Wno-missing-field-initializers": 1
          linux:
            pthread: 1
          mac:
            stdlib: "libc++"
        outputFile: "libbson-1.0.a"
      path:
        includeDirs: ['source/src', 'source/src/bson', 'source/src/yajl']
        install:
          headers: [
            from: "source/src/bson"
            to: "include/libbson-1.0"
          ,
            from: "source/src/yajl"
            to: "include/libbson-1.0"
          ,
            from: "build/src/bson"
            to: "include/libbson-1.0"
          ]
          libraries: [
            from: "source/build"
            to: "lib"
          ]
        project: "source"
    ,
      git:
        repository: "openssl/openssl"
        tag: "OpenSSL_1_0_2h"
      mac:
        PLATFORM: "darwin64-x86_64-cc"
        OSX_DEPLOYMENT_VERSION: "10.8"
        ARCH: "x86_64"
        OSX_SDK_VERSION: "${xcrun --sdk macosx --show-sdk-version}"
        OSX_PLATFORM: "${xcrun --sdk macosx --show-sdk-platform-path}"
        OSX_SDK: "${xcrun --sdk macosx --show-sdk-path}"
      ios:
        ARCH: ["arm64", "armv7s", "armv7"]
        CROSS_TOP: "{{PLATFORM}}/Developer"
      OPENSSL_VERSION: "1.0.2h"
      configure:
        "mac ios":
          bignum: "sed -ie \"s/BIGNUM \\*I,/BIGNUM \\*i,/g\" crypto/rsa/rsa.h"
        mac:
          configure: "./Configure {{PLATFORM}} --openssldir=\"{{d.build}}/openssl-{{OPENSSL_VERSION}}-{{ARCH}}\""
          sed: "sed -ie \"s!^CFLAG=!CFLAG=-isysroot {{OSX_SDK}} -arch {{ARCH}} -mmacosx-version-min={{OSX_DEPLOYMENT_VERSION}} !\" \"Makefile\""
      build: with: "make"
      path:
        project: "source"
        install:
          headers:
            from: "source/include"
            to: "include/openssl/openssl"
          libraries:
            from: "source"
            to: "lib"
    ]
  ]
,
  git: "datasift/served"
  path:
    project: "source"
    install:
      libraries:
        from: "source/lib"
      headers:
        from: "source/src"
  build:
    with: "cmake" # with is optional if name is present as a key
    cmake:
      configure:
        RE2_LIBRARY: "~/lib/libre2.a"
        RE2_INCLUDE_DIR: "~/include"
        SERVED_BUILD_STATIC: "ON"
        SERVED_BUILD_TESTS: "OFF"
        SERVED_BUILD_SHARED: "OFF"
    boost: libs: ["asio", "system"]
  deps: [
    git: "google/re2"
    target: "static"
    install:
      libraries:
        from: "source/lib"
      headers:
        from: "source/src"
    build:
      with: "ninja"
      sources: matching: ["re2/*.cc", "util/*.cc"]
      linux:
        sources: matching: ["!util/threadwin.cc"]
      mac:
        sources: matching: ["!util/threadwin.cc"]
      cFlags:
        O3: 1
        std: "c++11"
        g: 1
        Wall: 1
        Wextra: 1
        "Wno-unused-parameter": 1
        "Wno-missing-field-initializers": 1
        pthread: 1
        mac:
          stdlib: "libc++"
  ]
]
