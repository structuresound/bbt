name: "tmake_server"
target: "bin"
build:
  with: "cmake"
  linux:
    linkerFlags:
      ldl: 1
deps: [
  git:
    repository: "mongodb/mongo-cxx-driver"
    tag: "r3.0.1"
  path:
    includeDirs: ['source/src']
    install:
      headers: [
        from: 'source/src/mongocxx'
        to: 'include/mongocxx'
      ]
  configure:
    create:
      "mongocxx/config/export":
        path: 'src/mongocxx/config/export.hpp'
        string: """
        #ifndef MONGOCXX_API_H
          #define MONGOCXX_API_H
          #define MONGOCXX_API
          #define MONGOCXX_PRIVATE
        #endif
        """
    replace:
      versions:
        matching: [ 'src/bsoncxx/config/version.hpp.in', 'src/mongocxx/config/version.hpp.in' ]
        inputs:
          "MONGOCXX_VERSION_MAJOR": "3"
          "MONGOCXX_VERSION_MINOR": "0"
          "MONGOCXX_VERSION_PATCH": "2"
          "MONGOCXX_VERSION_EXTRA": "-rc0-pre"
        directive: prepost: '@'
        ext: '.hpp'
      config:
        matching: [
          'src/mongocxx/config/config.hpp.in', 'src/mongocxx/config/private/config.hpp.in'
        ]
        inputs:
          "@MONGOCXX_INLINE_NAMESPACE@": "v3_0_2"
        ext: '.hpp'
  build:
    with: "ninja"
    sources: matching: ['src/mongocxx/**/*.cpp', '!src/mongocxx/test/**']
    cFlags:
      DMONGO_CXX_DRIVER_COMPILING: 1
      DMONGOC_ENABLE_SSL: 1
      DMONGOC_ENABLE_SSL_OPENSSL: 1
      DMONGOC_HAVE_SSL: 1
      O3: 1
      std: "c++11"
  deps: [
    name: 'bson-cxx'
    git:
      repository: "mongodb/mongo-cxx-driver"
      tag: "r3.0.1"
    path:
      includeDirs: ['source/src']
      install:
        headers: [
          from: 'source/src/bsoncxx'
          to: 'include/bsoncxx'
        ]
    configure:
      create:
        "bsoncxx/config/export":
          path: 'src/bsoncxx/config/export.hpp'
          string: """
          #ifndef BSONCXX_API_H
            #define BSONCXX_API_H
            #define BSONCXX_API
            #define BSONCXX_PRIVATE
          #endif
          """
      replace:
        versions:
          matching: [ 'src/bsoncxx/config/version.hpp.in', 'src/mongocxx/config/version.hpp.in' ]
          inputs:
            "BSONCXX_VERSION_MAJOR": "3"
            "BSONCXX_VERSION_MINOR": "0"
            "BSONCXX_VERSION_PATCH": "2"
            "BSONCXX_VERSION_EXTRA": "-rc0-pre"
          directive: prepost: '@'
          ext: '.hpp'
        config:
          matching: [
            'src/bsoncxx/config/config.hpp.in', 'src/bsoncxx/config/private/config.hpp.in'
          ]
          inputs:
            "#cmakedefine BSONCXX_POLY_USE_STD_EXPERIMENTAL": "//#define BSONCXX_POLY_USE_STD_EXPERIMENTAL 0"
            "#cmakedefine BSONCXX_POLY_USE_MNMLSTC": "//#define BSONCXX_POLY_USE_MNMLSTC 0"
            "#cmakedefine BSONCXX_POLY_USE_SYSTEM_MNMLSTC": "//#define BSONCXX_POLY_USE_SYSTEM_MNMLSTC 0"
            "#cmakedefine BSONCXX_POLY_USE_BOOST": "#define BSONCXX_POLY_USE_BOOST 1"
            "@BSONCXX_INLINE_NAMESPACE@": "v3_0_2"
          ext: '.hpp'
    build:
      with: "ninja"
      sources: matching: ['src/bsoncxx/**/*.cpp', '!src/bsoncxx/test/**']
      cFlags:
        DBSON_CXX_DRIVER_COMPILING: 1
        O3: 1
        std: "c++11"
    deps: [
      git: "boostorg/core"
    ,
      git: "boostorg/assert"
    ,
      git: "boostorg/asio"
      deps: [
        git: "boostorg/date_time"
        deps: [
          git: "boostorg/range"
        ,
          git: "boostorg/iterator"
        ,
          git: "boostorg/detail"
        ,
          git: "boostorg/concept_check"
        ,
          git: "boostorg/lexical_cast"
        ,
          git: "boostorg/numeric_conversion"
        ,
          git: "boostorg/mpl"
        ,
          git: "boostorg/preprocessor"
        ,
          git: "boostorg/bind"
        ,
          git: "boostorg/container"
        ,
          git: "boostorg/math"
        ,
          git: "boostorg/regex"
        ,
          git: "boostorg/integer"
        ,
          git: "boostorg/array"
        ,
          git: "boostorg/tokenizer"
        ,
          git: "boostorg/io"
        ,
          git: "boostorg/algorithm"
        ]
      ]
    ,
      git: "boostorg/system"
      build:
        with: "ninja"
        outputFile: "libboost_system.a"
      deps: [
        git: "boostorg/predef"
      ,
        git: "boostorg/core"
      ,
        git: "boostorg/config"
      ]
    ,
      git: "boostorg/utility"
    ,
      git: "boostorg/move"
    ,
      git: "boostorg/optional"
    ,
      git: "boostorg/static_assert"
    ,
      git: "boostorg/throw_exception"
    ,
      git: "boostorg/type_traits"
    ,
      git: "boostorg/smart_ptr"
    ,
      git:
        repository: "mongodb/mongo-c-driver"
        tag: "1.3.4"
      configure:
        replace:
          files:
            matching: ['src/mongoc/mongoc-config.h.in', 'src/mongoc/mongoc-version.h.in']
            inputs:
              MONGOC_MAJOR_VERSION: 1
              MONGOC_MINOR_VERSION: 3
              MONGOC_MICRO_VERSION: 4
              MONGOC_PRERELEASE_VERSION: 'rc0'
              MONGOC_VERSION: '1.3.4'
              MONGOC_ENABLE_CRYPTO: 1
              MONGOC_ENABLE_CRYPTO_CNG: 0
              MONGOC_ENABLE_CRYPTO_COMMON_CRYPTO: 0
              mac:
                MONGOC_ENABLE_CRYPTO_COMMON_CRYPTO: 1
              MONGOC_ENABLE_CRYPTO_LIBCRYPTO: 1
              MONGOC_ENABLE_CRYPTO_SYSTEM_PROFILE: 1
              MONGOC_ENABLE_SSL: 1
              MONGOC_ENABLE_SSL_OPENSSL: 1
              MONGOC_ENABLE_SSL_SECURE_CHANNEL: 0
              MONGOC_ENABLE_SSL_SECURE_TRANSPORT: 0
              MONGOC_ENABLE_SASL: 0
              MONGOC_HAVE_SASL_CLIENT_DONE: 0
              MONGOC_HAVE_WEAK_SYMBOLS: 0
              MONGOC_NO_AUTOMATIC_GLOBALS: 1
            directive:
              prepost: '@'
            ext: '.h'
      build:
        with: "ninja"
        sources:
          matching: [
            'src/mongoc/*.c'
            '!src/mongoc/mongoc-rand-cng.c'
            '!src/mmongoc/mongoc-stream-tls-secure-channel-private.c'
            '!src/mongoc/mongoc-crypto-cng.c'
            '!src/mongoc/mongoc-secure-channel.c'
            '!src/mongoc/mongoc-secure-transport'
            '!src/mongoc/mongoc-crypto-common-crypto'
            '!src/mongoc/mongoc-rand-common-crypto'
          ]
        cFlags:
          DMONGOC_COMPILATION: 1
          D_GNU_SOURCE: 1
          D_BSD_SOURCE: 1
          O3: 1
          std: "c++11"
          g: 1
          Wall: 1
          Wextra: 1
          "Wno-unused-parameter": 1
          "Wno-missing-field-initializers": 1
          linux:
            pthread: 1
          win:
            "D_CRT_SECURE_NO_WARNINGS": true
          mac:
            stdlib: "libc++"
            "Wno-deprecated-declarations": true
        outputFile: "libmongoc-1.0.a"
      path:
        install:
          headers: [
            from: "source/src/mongoc"
            to: "include/libmongoc-1.0"
          ]
      test:
        build: with: "ninja"
      deps: [
        git:
          repository: "mongodb/libbson"
          tag: "1.3.4"
        configure:
          create:
            stdint:
              path: 'src/bson/bson-stdint.h'
              string: '#include <stdint.h>'
          replace:
            files:
              matching: ['src/bson/bson-config.h.in', 'src/bson/bson-version.h.in']
              inputs:
                BSON_MAJOR_VERSION: 1
                BSON_MINOR_VERSION: 3
                BSON_MICRO_VERSION: 4
                BSON_PRERELEASE_VERSION: 'rc0'
                BSON_VERSION: '1.0.0'
                BSON_BYTE_ORDER:
                  macro: 'OS_ENDIANNESS'
                  map:
                    LE: 1234
                    BE: 4321
                BSON_HAVE_STDBOOL_H: 1
                BSON_OS: 1
                BSON_HAVE_ATOMIC_32_ADD_AND_FETCH: 1
                BSON_HAVE_ATOMIC_64_ADD_AND_FETCH: 1
                BSON_PTHREAD_ONCE_INIT_NEEDS_BRACES: 0
                BSON_HAVE_CLOCK_GETTIME: 1
                BSON_HAVE_STRNLEN: 1
                BSON_HAVE_SNPRINTF: 1
                BSON_NEEDS_SET_OUTPUT_FORMAT: 0
                BSON_EXTRA_ALIGN: 1
                BSON_HAVE_DECIMAL128: 0
                win:
                  BSON_OS: 2
                'mac linux':
                  BSON_HAVE_TIMESPEC: 1
              directive:
                prepost: '@'
              ext: '.h'
        build:
          with: "ninja"
          sources:
            matching: [
              'src/bson/**.c'
              'src/yajl/**.c'
            ]
          cFlags:
            DBSON_COMPILATION: 1
            O3: 1
            std: "c++11"
            g: 1
            Wall: 1
            Wextra: 1
            "Wno-unused-parameter": 1
            "Wno-missing-field-initializers": 1
            linux:
              pthread: 1
            mac:
              stdlib: "libc++"
          outputFile: "libbson-1.0.a"
        path:
          includeDirs: ['source/src', 'source/src/bson', 'source/src/yajl']
          install:
            headers: [
              from: "source/src/bson"
              to: "include/libbson-1.0"
            ,
              from: "source/src/yajl"
              to: "include/libbson-1.0"
            ,
              from: "build/src/bson"
              to: "include/libbson-1.0"
            ]
      ,
        git:
          repository: "openssl/openssl"
          tag: "OpenSSL_1_0_2h"
        OPENSSL_VERSION: "1.0.2h"
        DEVELOPER: "$(xcode-select -print-path)"
        mac:
          PLATFORM: "darwin64-x86_64-cc"
          OSX_DEPLOYMENT_VERSION: "10.8"
          OSX_SDK_VERSION: "$(xcrun --sdk macosx --show-sdk-version)"
          OSX_PLATFORM: "$(xcrun --sdk macosx --show-sdk-platform-path)"
          OSX_SDK: "$(xcrun --sdk macosx --show-sdk-path)"
        'mac linux':
          ARCH: "x86_64"
        ios:
          ARCH: "arm64"
          SDK_VERSION: "$(xcrun --sdk iphoneos --show-sdk-version)"
          CROSS_TOP: "{DEVELOPER}/Platforms/iPhoneOS.platform/Developer"
          CROSS_SDK: "iPhoneOS{SDK_VERSION}.sdk"
          IPHONEOS_DEPLOYMENT_VERSION: "6.0"
          IPHONEOS_SDK_VERSION: "$(xcrun --sdk iphoneos --show-sdk-version)"
          IPHONEOS_PLATFORM: "$(xcrun --sdk iphoneos --show-sdk-platform-path)"
          IPHONEOS_SDK: "$(xcrun --sdk iphoneos --show-sdk-path)"
        configure:
          "ios mac linux":
            bignum: "sed -ie \"s/BIGNUM \\*I,/BIGNUM \\*i,/g\" crypto/rsa/rsa.h"
          mac:
            configure: [
              "./Configure {PLATFORM} --openssldir=\"{d.build}/openssl-{OPENSSL_VERSION}-{ARCH}\""
              "sed -ie \"s!^CFLAG=!CFLAG=-isysroot {OSX_SDK} -arch {ARCH} -mmacosx-version-min={OSX_DEPLOYMENT_VERSION} !\" \"Makefile\""
            ]
          linux:
            configure: [
              "./config enable-tlsext no-shared no-zlib -fPIC no-gost --openssldir=\"{d.build}/openssl-{OPENSSL_VERSION}-{ARCH}\""
              "make depend"
            ]
          ios:
            configure: [
              "./Configure iphoneos-cross -no-asm --openssldir=\"/tmp/openssl-{OPENSSL_VERSION}-{ARCH}\""
              "perl -i -pe 's|static volatile sig_atomic_t intr_signal|static volatile int intr_signal|' crypto/ui/ui_openssl.c"
            ]
            replace:
              files:
                matching: [ "Makefile" ]
                inputs: "-isysroot $(CROSS_TOP)/SDKs/$(CROSS_SDK)": "-isysroot {CROSS_TOP}/SDKs/{CROSS_SDK} -miphoneos-version-min={SDK_VERSION}"
        build:
          'mac linux':
            with: "make"
          ios:
            shell: [
              "CC=\"{DEVELOPER}/usr/bin/gcc -fembed-bitcode -arch {ARCH}\" make"
            ]
        path:
          project: "source"
          install:
            headers:
              from: "source/include"
              to: "include/openssl"
            libraries:
              from: "source"
              to: "lib"
      ]
    ]
  ,
    git: "datasift/served"
    path:
      project: "source"
      install:
        libraries:
          from: "source/lib"
        headers:
          from: "source/src"
    build:
      with: "cmake" # with is optional if name is present as a key
      cmake:
        configure:
          BOOST_ROOT: "~/include"
          RE2_LIBRARY: "~/lib/libre2.a"
          RE2_INCLUDE_DIR: "~/include/re2"
          SERVED_BUILD_STATIC: "ON"
          SERVED_BUILD_TESTS: "OFF"
          SERVED_BUILD_SHARED: "OFF"
    deps: [
      git: "boostorg/asio"
    ,
      git: "google/re2"
      path:
        includeDirs: ["source"]
        install:
          headers: [
            from: "source/re2"
            to: "include/re2/re2"
            includeFrom: "include/re2"
          ,
            from: "source/util"
            to: "include/re2/util"
            includeFrom: "include/re2"
          ]
      build:
        with: "ninja"
        sources:
          matching: ["re2/*.cc", "util/*.cc"]
          linux:
            matching: ["re2/*.cc", "util/*.cc", "!util/threadwin.cc"]
          mac:
            matching: ["re2/*.cc", "util/*.cc", "!util/threadwin.cc"]
        cFlags:
          O3: 1
          std: "c++11"
          g: 1
          Wall: 1
          Wextra: 1
          "Wno-unused-parameter": 1
          "Wno-missing-field-initializers": 1
          pthread: 1
          mac:
            stdlib: "libc++"
    ]
  ]
]
